using FluentAssertions;
using NUnit.Framework;

namespace MetroStationNavigatorTask
{
    public class MetroStationNavigatorTestsTask
    {
        private IMetroStationNavigator _navigator;
        public virtual IMetroStationNavigator CreateNavigator() => new MetroStationNavigator(); // это удалять нельзя

  [TestCase("0", "1", "1", "12", "2", TestName = "Мало ламп, идем на 2й маршрут")]  

  [TestCase("7", "5", "2", "10", "return", TestName = "Лампочек больше крыс, возвращаемся")]
  [TestCase("255", "10", "8", "9", "return", TestName = "Лампочек больше крыс, возвращаемся")]
  [TestCase("255", "10", "5", "9", "return", TestName = "Лампочек больше крыс, возвращаемся")]
  [TestCase("6", "0", "0", "9", "return", TestName = "Лампочек больше крыс, возвращаемся")]
  [TestCase("1", "0", "0", "9", "return", TestName = "Лампочек больше крыс, возвращаемся")]

  [TestCase("7", "10", "8", "9", "1", TestName = "Лампочек хотя бы 7, 1й маршрут")]
  [TestCase("8", "10", "5", "9", "1", TestName = "Лампочек хотя бы 7, 1й маршрут")]
        [TestCase("9", "10", "8", "9", "1", TestName = "Лампочек хотя бы 7, 1й маршрут")]
  [TestCase("10", "10", "8", "9", "1", TestName = "Лампочек хотя бы 7, 1й маршрут")]

  [TestCase("6", "9", "7", "9", "2", TestName = "Меньше 10 крыс, идем по 2-му маршруту")]
        [TestCase("0", "0", "0", "9", "2", TestName = "Меньше 10 крыс, идем по 2-му маршруту")]
  [TestCase("0", "9", "7", "9", "2", TestName = "Меньше 10 крыс, идем по 2-му маршруту")]
  [TestCase("1", "9", "7", "9", "2", TestName = "Меньше 10 крыс, идем по 2-му маршруту")]       

  [TestCase("6", "10", "8", "9", "return", TestName = "Крыс с красными глазами меньше половины, возвращаемся")]
        [TestCase("6", "255", "126", "9", "return", TestName = "Крыс с красными глазами меньше половины, возвращаемся")]
  [TestCase("5", "10", "4", "10", "return", TestName = "Крыс с красными глазами меньше половины, возвращаемся")]
  [TestCase("5", "10", "0", "10", "return", TestName = "Крыс с красными глазами меньше половины, возвращаемся")]
 
  [TestCase("5", "10", "6", "12", "3", TestName = "Вода опустилась более чем на 11 см, идем по 3-му маршруту")]
        [TestCase("5", "10", "6", "13", "3", TestName = "Вода опустилась более чем на 11 см, идем по 3-му маршруту")]
  [TestCase("5", "10", "6", "20", "3", TestName = "Вода опустилась более чем на 11 см, идем по 3-му маршруту")]
        [TestCase("5", "10", "6", "254", "3", TestName = "Вода опустилась более чем на 11 см, идем по 3-му маршруту")]
        [TestCase("5", "10", "8", "255", "3", TestName = "Вода опустилась более чем на 11 см, идем по 3-му маршруту")]
 
  [TestCase("5", "10", "8", "8", "return", TestName = "Вода опустилась только на 8 см, возвращаемся")]
        [TestCase("6", "10", "5", "4", "return", TestName = "Вода опустилась меньше чем на 8 см, возвращаемся")]
  [TestCase("5", "10", "8", "4", "return", TestName = "Вода опустилась меньше чем на 8 см, возвращаемся")]
        [TestCase("6", "10", "8", "1", "return", TestName = "Вода опустилась меньше чем на 8 см, возвращаемся")]
  [TestCase("5", "10", "8", "0", "return", TestName = "Вода опустилась меньше чем на 8 см, возвращаемся")]
   
  [TestCase("5", "10", "6", "11", "4", 
      TestName = "Условия не выполнены, результат не кратен 3, идем по 4-му маршруту")]
  [TestCase("1", "11", "6", "10", "4",  
      TestName = "Условия не выполнены, результат не кратен 3, идем по 4-му маршруту")]
        [TestCase("5", "11", "6", "10", "4",  
    TestName = "Условия не выполнены, результат не кратен 3, идем по 4-му маршруту")]
        [TestCase("5", "255", "128", "10", "4",  
      TestName = "Условия не выполнены, результат не кратен 3, идем по 4-му маршруту")]
        

  [TestCase("5", "10", "2", "5", "return", TestName = "Результат кратен 3, возвращаемся")]
        [TestCase("0", "10", "5", "9", "return", TestName = "Результат кратен 3, возвращаемся")]
  [TestCase("5", "10", "6", "10", "return", TestName = "Результат кратен 3, возвращаемся")]
  [TestCase("6", "255", "128", "11", "return", TestName = "Результат кратен 3, возвращаемся")]
	//несколько условий

  [TestCase("7", "10", "4", "9", "return", TestName = "Крыс с красными глазами меньше половины, возвращаемся")]
  [TestCase("8", "9", "6", "10", "1", TestName = "Лампочек хотя бы 7, 1й маршрут")]
  [TestCase("7", "10", "6", "9", "1", TestName = "Лампочек хотя бы 7, 1й маршрут")] 
  [TestCase("7", "9", "6", "11", "1", TestName = "Лампочек хотя бы 7, 1й маршрут")] 
  [TestCase("11", "10", "6", "10", "return", TestName = "Лампочек больше крыс, возвращаемся")] 
  //[TestCase("9", "10", "6", "8", "return", TestName = "Вода опустилась только на 8 см, возвращаемся")]
  //[TestCase("6", "5", "4", "10", "return", TestName = "Лампочек больше крыс, возвращаемся")] 
  //[TestCase("6", "9", "3", "10", "return", TestName = "Крыс с красными глазами меньше половины, возвращаемся")]
  //[TestCase("6", "9", "5", "8", "return", TestName = "Вода опустилась только на 8 см, возвращаемся")]
  [TestCase("7", "9", "6", "12", "1", TestName = "Лампочек хотя бы 7, 1й маршрут")] 

        public void TestPath(string darkLampsCount, string ratsCount, string redRatsCount, string waterCount, string result)
        {
            _navigator = CreateNavigator();
            result.Should().BeEquivalentTo(_navigator.GetPath(darkLampsCount, ratsCount, redRatsCount, waterCount));
        }
    }
}
